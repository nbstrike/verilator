$version Generated by VerilatedVcd $end
$timescale 1ps $end
 $scope module top $end
  $scope module $unit $end
   $var wire 1 # global_bit $end
  $upscope $end
  $var wire 1 4 clk $end
  $scope module t $end
   $var wire 1 4 clk $end
   $var wire 32 5 cyc [31:0] $end
   $var wire 2 ) v_strp [1:0] $end
   $var wire 4 * v_strp_strp [3:0] $end
   $var wire 2 - v_unip_strp [1:0] $end
   $var wire 2 . v_arrp [2:1] $end
   $var wire 4 $ v_arrp_arrp [3:0] $end
   $var wire 4 / v_arrp_strp [3:0] $end
   $var wire 1 > v_arru[1] $end
   $var wire 1 ? v_arru[2] $end
   $var wire 1 @ v_arru_arru[3][1] $end
   $var wire 1 A v_arru_arru[3][2] $end
   $var wire 1 B v_arru_arru[4][1] $end
   $var wire 1 C v_arru_arru[4][2] $end
   $var wire 2 6 v_arru_arrp[3] [2:1] $end
   $var wire 2 7 v_arru_arrp[4] [2:1] $end
   $var wire 2 8 v_arru_strp[3] [1:0] $end
   $var wire 2 9 v_arru_strp[4] [1:0] $end
   $var real 64 % v_real $end
   $var real 64 : v_arr_real[0] $end
   $var real 64 < v_arr_real[1] $end
   $var wire 64 D v_chandle [63:0] $end
   $var wire 64 0 v_str32x2 [63:0] $end
   $var wire 32 + v_enumed [31:0] $end
   $var wire 32 , v_enumed2 [31:0] $end
   $var wire 3 2 v_enumb [2:0] $end
   $var wire 6 3 v_enumb2_str [5:0] $end
   $var wire 8 F unpacked_array[-2] [7:0] $end
   $var wire 8 G unpacked_array[-1] [7:0] $end
   $var wire 8 H unpacked_array[0] [7:0] $end
   $var wire 1 I LONGSTART_a_very_long_name_which_will_get_hashed_a_very_long_name_which_will_get_hashed_a_very_long_name_which_will_get_hashed_a_very_long_name_which_will_get_hashed_LONGEND $end
   $scope module a_module_instantiation_with_a_very_long_name_that_once_its_signals_get_concatenated_and_inlined_will_almost_certainly_result_in_them_getting_hashed $end
    $var wire 32 J PARAM [31:0] $end
   $upscope $end
   $scope module p2 $end
    $var wire 32 K PARAM [31:0] $end
   $upscope $end
   $scope module p3 $end
    $var wire 32 L PARAM [31:0] $end
   $upscope $end
   $scope module unnamedblk1 $end
    $var wire 32 ' b [31:0] $end
    $scope module unnamedblk2 $end
     $var wire 32 ( a [31:0] $end
    $upscope $end
   $upscope $end
  $upscope $end
 $upscope $end
$enddefinitions $end


#0
1#
b0000 $
r0 %
b00000000000000000000000000000000 '
b00000000000000000000000000000000 (
b00 )
b0000 *
b00000000000000000000000000000000 +
b00000000000000000000000000000000 ,
b00 -
b00 .
b0000 /
b0000000000000000000000000000000000000000000000000000000011111111 0
b000 2
b000000 3
04
b00000000000000000000000000000000 5
b00 6
b00 7
b00 8
b00 9
r0 :
r0 <
0>
0?
0@
0A
0B
0C
b0000000000000000000000000000000000000000000000000000000000000000 D
b00000000 F
b00000000 G
b00000000 H
0I
b00000000000000000000000000000100 J
b00000000000000000000000000000010 K
b00000000000000000000000000000011 L
#10
b1111 $
r0.1 %
b00000000000000000000000000000101 '
b00000000000000000000000000000101 (
b11 )
b1111 *
b00000000000000000000000000000001 +
b00000000000000000000000000000010 ,
b11 -
b11 .
b1111 /
b0000000000000000000000000000000100000000000000000000000011111110 0
b111 2
14
b00000000000000000000000000000001 5
b11 6
b11 7
b11 8
b11 9
r0.2 :
r0.3 <
#15
04
#20
b0000 $
r0.2 %
b00 )
b0000 *
b00000000000000000000000000000010 +
b00000000000000000000000000000100 ,
b00 -
b00 .
b0000 /
b0000000000000000000000000000001000000000000000000000000011111101 0
b110 2
b111111 3
14
b00000000000000000000000000000010 5
b00 6
b00 7
b00 8
b00 9
r0.4 :
r0.6 <
#25
04
#30
b1111 $
r0.3 %
b11 )
b1111 *
b00000000000000000000000000000011 +
b00000000000000000000000000000110 ,
b11 -
b11 .
b1111 /
b0000000000000000000000000000001100000000000000000000000011111100 0
b101 2
b110110 3
14
b00000000000000000000000000000011 5
b11 6
b11 7
b11 8
b11 9
r0.6000000000000001 :
r0.8999999999999999 <
#35
04
#40
b0000 $
r0.4 %
b00 )
b0000 *
b00000000000000000000000000000100 +
b00000000000000000000000000001000 ,
b00 -
b00 .
b0000 /
b0000000000000000000000000000010000000000000000000000000011111011 0
b100 2
b101101 3
14
b00000000000000000000000000000100 5
b00 6
b00 7
b00 8
b00 9
r0.8 :
r1.2 <
#45
04
#50
b1111 $
r0.5 %
b11 )
b1111 *
b00000000000000000000000000000101 +
b00000000000000000000000000001010 ,
b11 -
b11 .
b1111 /
b0000000000000000000000000000010100000000000000000000000011111010 0
b011 2
b100100 3
14
b00000000000000000000000000000101 5
b11 6
b11 7
b11 8
b11 9
r1 :
r1.5 <
#55
04
#60
b0000 $
r0.6 %
b00 )
b0000 *
b00000000000000000000000000000110 +
b00000000000000000000000000001100 ,
b00 -
b00 .
b0000 /
b0000000000000000000000000000011000000000000000000000000011111001 0
b010 2
b011011 3
14
b00000000000000000000000000000110 5
b00 6
b00 7
b00 8
b00 9
r1.2 :
r1.8 <
